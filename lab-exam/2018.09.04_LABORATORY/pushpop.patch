diff -Naur acse_1.1.3_pushpop/acse/Acse.lex acse_1.1.3/acse/Acse.lex
--- acse_1.1.3_pushpop/acse/Acse.lex	2018-08-30 09:59:52.607419778 +0200
+++ acse_1.1.3/acse/Acse.lex	2018-06-13 10:11:49.092117000 +0200
@@ -97,12 +97,6 @@
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
-"push"				{ return PUSH; }
-"from"				{ return FROM; }
-"pop"					{ return POP; }
-"into"				{ return INTO; }
-"is-empty"			{ return ISEMPTY; }
-"is-full"			{ return ISFULL; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff -Naur acse_1.1.3_pushpop/acse/Acse.y acse_1.1.3/acse/Acse.y
--- acse_1.1.3_pushpop/acse/Acse.y	2018-08-30 11:02:52.872308011 +0200
+++ acse_1.1.3/acse/Acse.y	2018-06-13 10:11:49.092117000 +0200
@@ -90,13 +90,6 @@
 t_io_infos *file_infos;    /* input and output files used by the compiler */
 
 
-struct t_stack{
-	char* id;
-  	int index_reg;
-   int array_size;
-} stack = {NULL, 0, 0};
-
-
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
@@ -131,8 +124,6 @@
 %token RETURN
 %token READ
 %token WRITE
-%token PUSH POP FROM INTO
-%token ISEMPTY ISFULL
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -163,7 +154,6 @@
 %left MINUS PLUS
 %left MUL_OP DIV_OP
 %right NOT
-%right ISEMPTY ISFULL
 
 /*=========================================================================
                          BISON GRAMMAR
@@ -257,7 +247,6 @@
             | control_statement          { /* does nothing */ }
             | read_write_statement SEMI  { /* does nothing */ }
             | SEMI            { gen_nop_instruction(program); }
-            | stack_statement 				{}
 ;
 
 control_statement : if_statement         { /* does nothing */ }
@@ -270,11 +259,6 @@
                      | write_statement { /* does nothing */ }
 ;
 
-stack_statement : pop_statement {}
-					 | push_statement {}
-;
-
-
 assign_statement : IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
             {
                /* Notify to `program' that the value $6
@@ -473,66 +457,6 @@
             }
 ;
 
-push_statement : PUSH exp INTO IDENTIFIER
-				{
-					t_axe_variable* v = getVariable(program, $4);
-					
-					if ( v->isArray == 0 )
-							notifyError(AXE_SYNTAX_ERROR);
-					
-					if ( stack.id == NULL ){						// if no stack was previously used then initialize the descriptor
-						stack.id = strdup($4);
-						stack.index_reg = gen_load_immediate(program, 0);   //index_reg = 0 lfj
-					}
-
-					if ( strcmp(stack.id, $4) ) 				// if ID is different from the previously stored ID then raise an error
-						notifyError(AXE_SYNTAX_ERROR);
-               else{  
-               	t_axe_label *l = newLabel(program);
-               	int r = getNewRegister(program);
-               	gen_subi_instruction(program, r, stack.index_reg, v->arraySize);				// check if stack is not full
-               	gen_beq_instruction(program, l, 0);
-               	storeArrayElement(program, stack.id, create_expression(stack.index_reg, REGISTER), $2);		// push $2
-               	gen_addi_instruction(program, stack.index_reg, stack.index_reg, 1);								// update the top-of-stack
-               	assignLabel(program, l);			 													// fix label to avoid push if full
-               }
-               free($4);					 
-				}
-;
-
-
-pop_statement : POP IDENTIFIER FROM IDENTIFIER
-				{
-					t_axe_variable* v = getVariable(program, $4);
-					
-					if ( v->isArray == 0 )
-							notifyError(AXE_SYNTAX_ERROR);
-					
-					if ( stack.id == NULL ){						// if no stack was previously used then initialize the descriptor
-						stack.id = strdup($4);
-						stack.index_reg = gen_load_immediate(program, 0);
-					}
-
-					if ( strcmp(stack.id, $4) ) 				// if ID is different from the previously stored ID then raise an error
-						notifyError(AXE_SYNTAX_ERROR);
-               else{  
-               	t_axe_label *l = newLabel(program);
-               	int r = getNewRegister(program);
-               	gen_subi_instruction(program, r, stack.index_reg, 0);				// check if stack is not empty
-               	gen_beq_instruction(program, l, 0);  //若r是0，则stack为空，跳出去！！！（最后一行assign的Label l)
-               	gen_subi_instruction(program, r, stack.index_reg, 1);	
-               	r = loadArrayElement(program, stack.id, create_expression(r, REGISTER));		// pop
-               	gen_addi_instruction(program, get_symbol_location(program, $2, 0), r, 0);
-               	gen_subi_instruction(program, stack.index_reg, stack.index_reg, 1);								// update the top-of-stack
-               	assignLabel(program, l);																// fix label to avoid pop if empty
-               }
-               free($2);
-               free($4);			
-				}
-;
-
-
-
 exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
    | IDENTIFIER  {
                      int location;
@@ -646,48 +570,6 @@
                                  (program, exp_r0, $2, SUB);
                         }
                      }
-   | ISEMPTY IDENTIFIER 
-				{
-					t_axe_variable* v = getVariable(program, $2);
-					
-					if ( v->isArray == 0 )
-							notifyError(AXE_SYNTAX_ERROR);
-					
-					if ( stack.id == NULL ){						// if no stack was previously used then initialize the descriptor
-						stack.id = strdup($2);
-						stack.index_reg = gen_load_immediate(program, 0);
-						$$ = create_expression(1, IMMEDIATE);
-					}
-					else{
-						if ( strcmp(stack.id, $2) ) 				   // if ID is different from the previously stored ID then raise an error
-							notifyError(AXE_SYNTAX_ERROR);
-		            else  
-		            	$$ = handle_binary_comparison (program, create_expression(stack.index_reg, REGISTER), create_expression(0, IMMEDIATE), _EQ_);
-					}              
-               free($2);			
-				}
-   							
-   							
-   | ISFULL IDENTIFIER 
-				{
-					t_axe_variable* v = getVariable(program, $2);
-					
-					if ( v->isArray == 0 )
-							notifyError(AXE_SYNTAX_ERROR);
-					
-					if ( stack.id == NULL ){						// if no stack was previously used then initialize the descriptor
-						stack.id = strdup($2);
-						stack.index_reg = gen_load_immediate(program, 0);
-						$$ = create_expression(0, IMMEDIATE);
-					}
-					else{
-						if ( strcmp(stack.id, $2) ) 				   // if ID is different from the previously stored ID then raise an error
-							notifyError(AXE_SYNTAX_ERROR);
-		            else  
-		            	$$ = handle_binary_comparison (program, create_expression(stack.index_reg, REGISTER), create_expression(v->arraySize, IMMEDIATE), _EQ_);
-					}              
-               free($2);			
-				}   							   							
 ;
 
 %%
diff -Naur acse_1.1.3_pushpop/tests/pushpop/test.src acse_1.1.3/tests/pushpop/test.src
--- acse_1.1.3_pushpop/tests/pushpop/test.src	2018-08-30 11:06:41.439396356 +0200
+++ acse_1.1.3/tests/pushpop/test.src	1970-01-01 01:00:00.000000000 +0100
@@ -1,20 +0,0 @@
-int a[5];
-int x, y, z;
-
-read(x);
-read(y);
-
-push (x+1) into a;
-push y*x into a;
-
-
-pop z from a;
-write(z);
-pop z from a;
-write(z);
-
-
-if (is-empty a)
-  write(1);     
-else
-  write(0);
